import os
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.client.session.aiohttp import AiohttpSession
from aiohttp import web
from storage import storage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# üîπ Bot token
TOKEN = os.getenv("BOT_TOKEN")

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
PROXY_URL = os.getenv("PROXY_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä: http://proxy.example.com:8080

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –ø—Ä–æ–∫—Å–∏
if PROXY_URL:
    session = AiohttpSession(
        proxy=PROXY_URL,
        timeout=60.0,
        connect_timeout=60.0
    )
    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: {PROXY_URL}")
else:
    session = AiohttpSession(
        timeout=60.0,
        connect_timeout=60.0,
        read_timeout=60.0,
        write_timeout=60.0
    )
    logger.info("‚úÖ –ü—Ä–æ–∫—Å–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    session=session,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher(storage=storage)

# üîπ HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks
async def handle_health_check(request):
    return web.Response(text="‚úÖ Bot is alive and running!")

async def start_http_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render"""
    app = web.Application()
    app.router.add_get('/', handle_health_check)
    app.router.add_get('/health', handle_health_check)
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    port = int(os.getenv("PORT", 8080))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    
    logger.info(f"‚úÖ HTTP server started on port {port}")
    return runner

async def check_telegram_access():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram API"""
    try:
        import aiohttp
        async with aiohttp.ClientSession() as test_session:
            async with test_session.get('https://api.telegram.org', timeout=10) as resp:
                if resp.status == 200:
                    logger.info("‚úÖ Telegram API –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å: {resp.status}")
                    return False
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram API: {e}")
        return False

async def main():
    # üîπ –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    http_runner = await start_http_server()
    
    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API
    telegram_accessible = await check_telegram_access()
    
    if not telegram_accessible:
        logger.warning("‚ö†Ô∏è Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞")
    
    try:
        # üîπ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        from handlers.admin import router as admin_router
        from handlers.start import router as start_router
        from handlers.courses import router as courses_router
        from handlers.schedule import router as schedule_router
        from handlers.register import router as register_router
        from handlers.reviews import router as reviews_router
        from handlers.contacts import router as contacts_router
        from handlers.language import router as language_router
        from handlers.question import router as question_router
        from handlers.group_moderation import router as group_moderation_router
        from handlers.broadcast import router as broadcast_router
        from handlers.group_register import router as group_register_router

        dp.include_router(admin_router)
        dp.include_router(question_router)
        dp.include_router(start_router)
        dp.include_router(courses_router)
        dp.include_router(schedule_router)
        dp.include_router(register_router)
        dp.include_router(reviews_router)
        dp.include_router(contacts_router)
        dp.include_router(language_router)
        dp.include_router(group_moderation_router)
        dp.include_router(broadcast_router)
        dp.include_router(group_register_router)

        # üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        from data.db import init_db
        init_db()
        
        # üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã –ë–î
        from handlers.group_moderation import init_group_db
        init_group_db()

        logger.info("‚úÖ Bot ishga tushdi...")
        
        # –ï—Å–ª–∏ Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        if not telegram_accessible:
            logger.info("üåê –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞")
            while True:
                await asyncio.sleep(3600)
            return
        
        max_retries = 10
        retry_delay = 5
        
        for attempt in range(max_retries):
            try:
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ #{attempt + 1}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                try:
                    me = await bot.get_me()
                    logger.info(f"‚úÖ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: @{me.username}")
                except Exception as auth_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_error}")
                    raise
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º polling
                await dp.start_polling(
                    bot, 
                    allowed_updates=dp.resolve_used_update_types(),
                    close_bot_session=False
                )
                break
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {type(e).__name__}: {str(e)[:100]}...")
                
                if attempt < max_retries - 1:
                    current_delay = retry_delay * (attempt + 1)
                    logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {current_delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(current_delay)
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    break
                    
    except Exception as critical_error:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {critical_error}")
    
    finally:
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
        logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞")
        try:
            while True:
                await asyncio.sleep(3600)
        except asyncio.CancelledError:
            logger.info("üö´ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        finally:
            await bot.session.close()
            await http_runner.cleanup()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")