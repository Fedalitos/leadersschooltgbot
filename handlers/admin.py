# ============================================
# üîπ handlers/admin.py ‚Äî administrator harakatlari
# ============================================

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command

from data.db import update_application_status, update_question_status, get_statistics, get_user_count
from data.languages import user_languages
from data.admins import is_admin, ADMINS
from keyboards.admin_buttons import admin_panel_buttons
from data.db import get_pending_applications_count, get_pending_questions_count, get_recent_applications, get_recent_questions
from handlers.broadcast import admin_panel_buttons  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
class AnswerState(StatesGroup):
    waiting_for_answer = State()

# Foydalanuvchilarga javob matnlari
response_texts = {
    "ru": {
        "approved": "‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
        "rejected": "‚ùå <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>\n\n–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        "answered": "üí¨ <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n\n{}",
        "not_admin": "‚õî <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>"
    },
    "uz": {
        "approved": "‚úÖ <b>Arizangiz qabul qilindi!</b>\n\nAdministrator tafsilotlar uchun siz bilan bog'lanadi.",
        "rejected": "‚ùå <b>Arizangiz rad etildi.</b>\n\nMa'lumot uchun administratorga murojaat qiling.",
        "answered": "üí¨ <b>Savolingizga javob:</b>\n\n{}",
        "not_admin": "‚õî <b>Sizda administrator huquqlari yo'q!</b>"
    },
    "en": {
        "approved": "‚úÖ <b>Your application has been approved!</b>\n\nAdministrator will contact you for details.",
        "rejected": "‚ùå <b>Your application has been rejected.</b>\n\nContact administrator for information.",
        "answered": "üí¨ <b>Answer to your question:</b>\n\n{}",
        "not_admin": "‚õî <b>You don't have administrator rights!</b>"
    }
}

# ==============================
# üîò Administrator harakatlarini qayta ishlash
# ==============================
@router.callback_query(lambda c: c.data.startswith(("approve_", "reject_", "contact_", "delete_", "answer_question_", "question_done_", "delete_question_")))
async def admin_action(call: CallbackQuery, state: FSMContext):
    # Administratorlik huquqini tekshirish
    if not is_admin(call.from_user.id):
        lang = user_languages.get(call.from_user.id, "uz")
        await call.answer(response_texts[lang]["not_admin"], show_alert=True)
        return
    
    data = call.data
    admin_id = call.from_user.id
    
    if data.startswith("approve_"):
        # Qabul qilish
        parts = data.split("_")
        target_user_id = int(parts[1])
        application_id = int(parts[2])
        
        # Foydalanuvchi tilini olish
        user_lang = user_languages.get(target_user_id, "uz")
        
        # Ariza statusini yangilash
        update_application_status(application_id, "qabul qilindi", admin_id, "Ariza qabul qilindi")
        
        # Foydalanuvchiga xabar (o'z tilida)
        user_text = response_texts[user_lang]["approved"]
        
        try:
            await call.bot.send_message(chat_id=target_user_id, text=user_text)
        except:
            pass
            
        await call.answer("‚úÖ Ariza qabul qilindi")
        await call.message.edit_reply_markup(reply_markup=None)
        
    elif data.startswith("reject_"):
        # Rad etish
        parts = data.split("_")
        target_user_id = int(parts[1])
        application_id = int(parts[2])
        
        # Foydalanuvchi tilini olish
        user_lang = user_languages.get(target_user_id, "uz")
        
        # Ariza statusini yangilash
        update_application_status(application_id, "rad etildi", admin_id, "Ariza rad etildi")
        
        # Foydalanuvchiga xabar (o'z tilida)
        user_text = response_texts[user_lang]["rejected"]
        
        try:
            await call.bot.send_message(chat_id=target_user_id, text=user_text)
        except:
            pass
            
        await call.answer("‚ùå Ariza rad etildi")
        await call.message.edit_reply_markup(reply_markup=None)
        
    elif data.startswith("answer_question_"):
        # –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å
        parts = data.split("_")
        target_user_id = int(parts[2])
        question_id = int(parts[3])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        await state.update_data(target_user_id=target_user_id, question_id=question_id)
        await call.message.answer("üí¨ <b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>")
        await state.set_state(AnswerState.waiting_for_answer)
        await call.answer()
        
    elif data.startswith("question_done_"):
        # –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ
        question_id = int(data.split("_")[2])
        update_question_status(question_id, "answered", call.from_user.id)
        await call.message.edit_reply_markup(reply_markup=None)
        await call.answer("‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π")
        
    elif data.startswith("contact_"):
        # Bog'lanish
        target_user_id = int(data.split("_")[1])
        await call.answer(f"Foydalanuvchi ID: {target_user_id}")
        
    elif data.startswith("delete_"):
        # O'chirish
        application_id = int(data.split("_")[1])
        await call.message.delete()
        await call.answer("üóëÔ∏è Ariza o'chirildi")
        
    elif data.startswith("delete_question_"):
        # –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å
        question_id = int(data.split("_")[2])
        await call.message.delete()
        await call.answer("üóëÔ∏è –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω")

# ==============================
# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
# ==============================
@router.message(AnswerState.waiting_for_answer)
async def process_admin_answer(message: Message, state: FSMContext):
    user_data = await state.get_data()
    
    if 'target_user_id' in user_data and 'question_id' in user_data:
        target_user_id = user_data['target_user_id']
        question_id = user_data['question_id']
        answer_text = message.text
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_lang = user_languages.get(target_user_id, "uz")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            response_text = response_texts[user_lang]["answered"].format(answer_text)
            await message.bot.send_message(chat_id=target_user_id, text=response_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞
            update_question_status(question_id, "answered", message.from_user.id, answer_text)
            
            await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        
        await state.clear()

# –¢–µ–∫—Å—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
stats_texts = {
    "ru": {
        "title": "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n\n",
        "users": "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
                "‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                "‚Ä¢ –ü–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫–∏: {applications_users}\n"
                "‚Ä¢ –ó–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å—ã: {questions_users}\n\n",
        "applications": "üìù <b>–ó–∞—è–≤–∫–∏:</b>\n"
                       "‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_applications}\n"
                       "‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {pending_applications}\n"
                       "‚Ä¢ –û–¥–æ–±—Ä–µ–Ω—ã: {approved_applications}\n"
                       "‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: {rejected_applications}\n\n",
        "questions": "‚ùì <b>–í–æ–ø—Ä–æ—Å—ã:</b>\n"
                    "‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}\n"
                    "‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: {pending_questions}\n"
                    "‚Ä¢ –û—Ç–≤–µ—Ç–∏–ª–∏: {answered_questions}\n\n",
        "recent": "üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π:</b>\n"
                 "‚Ä¢ –ó–∞—è–≤–æ–∫: {app_last_7_days}\n"
                 "‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤: {quest_last_7_days}\n\n",
        "popular": "üéØ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É—Ä—Å—ã:</b>\n{popular_courses}",
        "not_admin": "‚õî <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>"
    },
    "uz": {
        "title": "üìä <b>BOT STATISTIKASI</b>\n\n",
        "users": "üë• <b>Foydalanuvchilar:</b>\n"
                "‚Ä¢ Jami foydalanuvchilar: {total_users}\n"
                "‚Ä¢ Ariza yuborganlar: {applications_users}\n"
                "‚Ä¢ Savol berganlar: {questions_users}\n\n",
        "applications": "üìù <b>Arizalar:</b>\n"
                       "‚Ä¢ Jami arizalar: {total_applications}\n"
                       "‚Ä¢ Kutayotgan: {pending_applications}\n"
                       "‚Ä¢ Qabul qilingan: {approved_applications}\n"
                       "‚Ä¢ Rad etilgan: {rejected_applications}\n\n",
        "questions": "‚ùì <b>Savollar:</b>\n"
                    "‚Ä¢ Jami savollar: {total_questions}\n"
                    "‚Ä¢ Javob kutayotgan: {pending_questions}\n"
                    "‚Ä¢ Javob berilgan: {answered_questions}\n\n",
        "recent": "üìà <b>7 kunlik faollik:</b>\n"
                 "‚Ä¢ Arizalar: {app_last_7_days}\n"
                 "‚Ä¢ Savollar: {quest_last_7_days}\n\n",
        "popular": "üéØ <b>Mashhur kurslar:</b>\n{popular_courses}",
        "not_admin": "‚õî <b>Sizda administrator huquqlari yo'q!</b>"
    },
    "en": {
        "title": "üìä <b>BOT STATISTICS</b>\n\n",
        "users": "üë• <b>Users:</b>\n"
                "‚Ä¢ Total users: {total_users}\n"
                "‚Ä¢ Applied: {applications_users}\n"
                "‚Ä¢ Asked questions: {questions_users}\n\n",
        "applications": "üìù <b>Applications:</b>\n"
                       "‚Ä¢ Total applications: {total_applications}\n"
                       "‚Ä¢ Pending: {pending_applications}\n"
                       "‚Ä¢ Approved: {approved_applications}\n"
                       "‚Ä¢ Rejected: {rejected_applications}\n\n",
        "questions": "‚ùì <b>Questions:</b>\n"
                    "‚Ä¢ Total questions: {total_questions}\n"
                    "‚Ä¢ Waiting: {pending_questions}\n"
                    "‚Ä¢ Answered: {answered_questions}\n\n",
        "recent": "üìà <b>Activity last 7 days:</b>\n"
                 "‚Ä¢ Applications: {app_last_7_days}\n"
                 "‚Ä¢ Questions: {quest_last_7_days}\n\n",
        "popular": "üéØ <b>Popular courses:</b>\n{popular_courses}",
        "not_admin": "‚õî <b>You don't have administrator rights!</b>"
    }
}

# ==============================
# üîò –ö–æ–º–∞–Ω–¥–∞ /stats
# ==============================
@router.message(Command("stats"))
async def stats_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        lang = user_languages.get(message.from_user.id, "uz")
        await message.answer(stats_texts[lang]["not_admin"])
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = get_statistics()
    users_stats = get_user_count()
    lang = user_languages.get(message.from_user.id, "ru")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É—Ä—Å—ã
    popular_courses = ""
    for course, count in stats['popular_courses']:
        popular_courses += f"‚Ä¢ {course}: {count}\n"
    
    # –°—á–∏—Ç–∞–µ–º –∑–∞—è–≤–∫–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞ 7 –¥–Ω–µ–π
    app_last_7_days = sum(count for _, count in stats['applications_last_7_days'])
    quest_last_7_days = sum(count for _, count in stats['questions_last_7_days'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    text = (
        stats_texts[lang]["title"] +
        stats_texts[lang]["users"].format(
            total_users=users_stats['total_users'],
            applications_users=users_stats['applications_users'],
            questions_users=users_stats['questions_users']
        ) +
        stats_texts[lang]["applications"].format(
            total_applications=stats['total_applications'],
            pending_applications=stats['pending_applications'],
            approved_applications=stats['approved_applications'],
            rejected_applications=stats['rejected_applications']
        ) +
        stats_texts[lang]["questions"].format(
            total_questions=stats['total_questions'],
            pending_questions=stats['pending_questions'],
            answered_questions=stats['answered_questions']
        ) +
        stats_texts[lang]["recent"].format(
            app_last_7_days=app_last_7_days,
            quest_last_7_days=quest_last_7_days
        ) +
        stats_texts[lang]["popular"].format(popular_courses=popular_courses)
    )
    
    await message.answer(text)

# ==============================
# üîò –ö–æ–º–∞–Ω–¥–∞ /panel
# ==============================
@router.message(Command("panel"))
async def admin_panel_command(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        lang = user_languages.get(message.from_user.id, "uz")
        await message.answer(response_texts[lang]["not_admin"])
        return
    
    pending_apps = get_pending_applications_count()
    pending_questions = get_pending_questions_count()
    
    text = f"üëë <b>Admin Panel</b>\n\n" \
           f"üìä <b>Statistika:</b>\n" \
           f"‚Ä¢ üìù Kutayotgan arizalar: {pending_apps}\n" \
           f"‚Ä¢ ‚ùì Kutayotgan savollar: {pending_questions}\n\n" \
           f"üõ† <b>Boshqaruv:</b>\n" \
           f"Quyidagi tugmalar orqali boshqaring"
    
    await message.answer(text, reply_markup=admin_panel_buttons())

# ==============================
# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
# ==============================
@router.callback_query(lambda c: c.data.startswith("admin_"))
async def admin_panel_actions(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer("‚õî Sizda admin huquqlari yo'q!")
        return
    
    data = call.data
    
    if data == "admin_stats":
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await stats_command(call.message)
        await call.answer()
        
    elif data == "admin_pending_apps":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏
        applications = get_recent_applications(10)
        
        if not applications:
            text = "üìù <b>Kutayotgan arizalar yo'q</b>\n\nHozircha yangi ariza kelmagan."
            await call.message.answer(text)
        else:
            text = "üìù <b>So'ngi 10 ta ariza:</b>\n\n"
            for app in applications:
                app_id, user_id, full_name, course, created_at = app
                text += f"üîπ <b>#{app_id}</b> - {full_name}\n" \
                       f"   üìö {course}\n" \
                       f"   ‚è∞ {created_at[:16]}\n" \
                       f"   üë§ ID: {user_id}\n\n"
            
            await call.message.answer(text)
        await call.answer()
        
    elif data == "admin_pending_questions":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        questions = get_recent_questions(10)
        
        if not questions:
            text = "‚ùì <b>Kutayotgan savollar yo'q</b>\n\nHozircha yangi savol kelmagan."
            await call.message.answer(text)
        else:
            text = "‚ùì <b>So'ngi 10 ta savol:</b>\n\n"
            for quest in questions:
                quest_id, user_id, question_text, created_at = quest
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                short_text = question_text[:100] + "..." if len(question_text) > 100 else question_text
                text += f"üîπ <b>#{quest_id}</b>\n" \
                       f"   üë§ ID: {user_id}\n" \
                       f"   üí¨ {short_text}\n" \
                       f"   ‚è∞ {created_at[:16]}\n\n"
            
            await call.message.answer(text)
        await call.answer()
        
    elif data == "admin_users":
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        users_stats = get_user_count()
        text = f"üë• <b>Foydalanuvchi statistikasi:</b>\n\n" \
               f"‚Ä¢ Jami foydalanuvchilar: {users_stats['total_users']}\n" \
               f"‚Ä¢ Ariza yuborganlar: {users_stats['applications_users']}\n" \
               f"‚Ä¢ Savol berganlar: {users_stats['questions_users']}\n" \
               f"‚Ä¢ Faqat ko'rib chiqqanlar: {users_stats['total_users'] - users_stats['applications_users'] - users_stats['questions_users']}"
        
        await call.message.answer(text)
        await call.answer()
        
    elif data == "admin_reviews":
        # Fikr-mulohazalar statistikasi
        from data.db import get_review_stats
        stats = get_review_stats()
        
        lang = user_languages.get(call.from_user.id, "uz")
        text = f"‚≠ê <b>Fikr-mulohazalar statistikasi</b>\n\n" \
               f"üìä Jami fikrlar: {stats['total_reviews']}\n" \
               f"üåü O'rtacha reyting: {stats['average_rating']:.1f}/5\n\n" \
               f"üìà Taqsimot:\n"
        
        for rating in range(5, 0, -1):
            count = stats['rating_distribution'].get(rating, 0)
            percentage = (count / stats['total_reviews'] * 100) if stats['total_reviews'] > 0 else 0
            stars = "‚≠ê" * rating + "‚òÜ" * (5 - rating)
            text += f"{stars}: {count} ({percentage:.1f}%)\n"
        
        await call.message.answer(text)
        
    elif data == "admin_reviews_list":
        # Fikr-mulohazalar ro'yxati
        from data.db import get_reviews
        reviews = get_reviews(limit=15)
        
        if not reviews:
            text = "üìù <b>Hali fikr-mulohazalar yo'q</b>"
            await call.message.answer(text)
        else:
            text = "üìã <b>Oxirgi 15 ta fikr:</b>\n\n"
            for review in reviews:
                review_id, user_name, rating, review_text, created_at = review
                stars = "‚≠ê" * rating + "‚òÜ" * (5 - rating)
                short_text = review_text[:80] + "..." if len(review_text) > 80 else review_text
                
                text += f"üîπ <b>#{review_id}</b> {stars}\n" \
                       f"üë§ {user_name}\n" \
                       f"üí¨ {short_text}\n" \
                       f"üìÖ {created_at[:10]}\n\n"
            
            await call.message.answer(text)
    
    elif data == "admin_notifications":
        # Bildirishnomalarni boshqarish
        text = "üîî <b>Bildirishnomalarni boshqarish</b>\n\n" \
               "Yangi ariza va savollar haqida bildirishnoma olishni sozlashingiz mumkin."
        await call.message.answer(text)
        
    elif data == "admin_settings":
        # Bot sozlamalari
        text = "‚öôÔ∏è <b>Bot sozlamalari</b>\n\n" \
               "Bu yerda botning turli parametrlarini sozlashingiz mumkin."
        await call.message.answer(text)
        
    elif data == "admin_refresh":
        # –û–±–Ω–æ–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å
        await call.message.delete()
        await admin_panel_command(call.message)
        await call.answer("üîÑ Panel yangilandi")
        
    elif data == "admin_close":
        # –ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å
        await call.message.delete()
        await call.answer("‚úÖ Panel yopildi")

    await call.answer()

# ==============================
# üîò –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
# ==============================
async def notify_admins_new_application(bot, application_id, user_info):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    for admin_id in ADMINS:
        try:
            text = f"üîî <b>Yangi ariza!</b>\n\n" \
                   f"üìã Ariza ‚Ññ: {application_id}\n" \
                   f"üë§ Foydalanuvchi: {user_info['full_name']}\n" \
                   f"üìö Kurs: {user_info['course']}\n" \
                   f"üìû Tel: {user_info['phone']}"
            
            await bot.send_message(admin_id, text)
        except:
            pass

async def notify_admins_new_question(bot, question_id, user_info):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ"""
    for admin_id in ADMINS:
        try:
            text = f"üîî <b>Yangi savol!</b>\n\n" \
                   f"üìã Savol ‚Ññ: {question_id}\n" \
                   f"üë§ Foydalanuvchi: {user_info['full_name']}\n" \
                   f"üí¨ Savol: {user_info['question_text'][:100]}..."
            
            await bot.send_message(admin_id, text)
        except:
            pass
        
