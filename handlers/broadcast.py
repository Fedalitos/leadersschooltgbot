# ============================================
# üîπ handlers/broadcast.py ‚Äî —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)
# ============================================

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.db import get_all_groups, get_all_users, get_connection
from data.admins import is_admin
from keyboards.admin_buttons import admin_broadcast_buttons, broadcast_confirmation_buttons
from data.languages import user_languages
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
# Add this import at the top of your file
from aiogram.types import Command

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
class BroadcastStates(StatesGroup):
    waiting_for_broadcast_text = State()
    waiting_for_broadcast_confirmation = State()

# –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
broadcast_texts = {
    "ru": {
        "menu": "üì¢ <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:",
        "input_text": "‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞",
        "confirm": "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:</b>\n\n{message_text}\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n‚Ä¢ –ì—Ä—É–ø–ø—ã: {groups_count}\n‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}\n‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_recipients}",
        "started": "üöÄ <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è {total} —Å–æ–æ–±—â–µ–Ω–∏–π...",
        "progress": "üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {success}/{total} ({percentage}%)",
        "completed": "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\nüìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}\n‚Ä¢ –í—Å–µ–≥–æ: {total}",
        "cancelled": "‚ùå <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
        "no_recipients": "‚ùå <b>–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!</b>",
        "not_admin": "‚õî <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>"
    },
    "uz": {
        "menu": "üì¢ <b>Xabar tarqatish tizimi</b>\n\nTarqatish turini tanlang:",
        "input_text": "‚úçÔ∏è <b>Tarqatish uchun matn kiriting:</b>\n\nHTML belgilash qo'llab-quvvatlanadi",
        "confirm": "‚úÖ <b>Tarqatishni tasdiqlang:</b>\n\n{message_text}\n\nüìä <b>Statistika:</b>\n‚Ä¢ Guruhlar: {groups_count}\n‚Ä¢ Foydalanuvchilar: {users_count}\n‚Ä¢ Jami qabul qiluvchilar: {total_recipients}",
        "started": "üöÄ <b>Xabar tarqatish boshlandi!</b>\n\n{total} xabar yuborilmoqda...",
        "progress": "üìä <b>Jarayon:</b> {success}/{total} ({percentage}%)",
        "completed": "‚úÖ <b>Xabar tarqatish tugadi!</b>\n\nüìä <b>Natijalar:</b>\n‚Ä¢ Muvaffaqiyatli: {success}\n‚Ä¢ Muvaffaqiyatsiz: {failed}\n‚Ä¢ Jami: {total}",
        "cancelled": "‚ùå <b>Xabar tarqatish bekor qilindi</b>",
        "no_recipients": "‚ùå <b>Xabar tarqatish uchun qabul qiluvchilar yo'q!</b>",
        "not_admin": "‚õî <b>Sizda administrator huquqlari yo'q!</b>"
    }
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–∫–∏
broadcast_data = {}

# ==============================
# üîò –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
# ==============================
@router.callback_query(lambda c: c.data == "admin_broadcast")
async def broadcast_menu(call: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏"""
    if not is_admin(call.from_user.id):
        lang = user_languages.get(call.from_user.id, "uz")
        await call.answer(broadcast_texts[lang]["not_admin"], show_alert=True)
        return
    
    lang = user_languages.get(call.from_user.id, "ru")
    await call.message.edit_text(broadcast_texts[lang]["menu"], reply_markup=admin_broadcast_buttons())
    await call.answer()

# ==============================
# üîò –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
# ==============================
@router.callback_query(lambda c: c.data in ["broadcast_groups", "broadcast_users", "create_broadcast"])
async def start_broadcast_creation(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(call.from_user.id):
        lang = user_languages.get(call.from_user.id, "uz")
        await call.answer(broadcast_texts[lang]["not_admin"], show_alert=True)
        return
    
    broadcast_type = "all"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º
    
    if call.data == "broadcast_groups":
        broadcast_type = "groups"
    elif call.data == "broadcast_users":
        broadcast_type = "users"
    
    await state.update_data(broadcast_type=broadcast_type)
    
    lang = user_languages.get(call.from_user.id, "ru")
    await call.message.edit_text(broadcast_texts[lang]["input_text"])
    await state.set_state(BroadcastStates.waiting_for_broadcast_text)
    await call.answer()

# ==============================
# üîò –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
# ==============================
@router.message(BroadcastStates.waiting_for_broadcast_text)
async def process_broadcast_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_data = await state.get_data()
    broadcast_type = user_data.get('broadcast_type', 'all')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    recipients = []
    
    if broadcast_type in ["groups", "all"]:
        groups = get_all_groups()
        recipients.extend([(chat_id, 'group') for chat_id in groups])
    
    if broadcast_type in ["users", "all"]:
        users = get_all_users()
        recipients.extend([(user_id, 'user') for user_id in users])
    
    if not recipients:
        lang = user_languages.get(message.from_user.id, "ru")
        await message.answer(broadcast_texts[lang]["no_recipients"])
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    broadcast_data[message.from_user.id] = {
        'text': message.text,
        'recipients': recipients,
        'message_id': message.message_id
    }
    
    lang = user_languages.get(message.from_user.id, "ru")
    confirm_text = broadcast_texts[lang]["confirm"].format(
        message_text=message.text[:500] + "..." if len(message.text) > 500 else message.text,
        groups_count=len([r for r in recipients if r[1] == 'group']),
        users_count=len([r for r in recipients if r[1] == 'user']),
        total_recipients=len(recipients)
    )
    
    await message.answer(confirm_text, reply_markup=broadcast_confirmation_buttons())
    await state.set_state(BroadcastStates.waiting_for_broadcast_confirmation)

# ==============================
# üîò –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
# ==============================
@router.callback_query(BroadcastStates.waiting_for_broadcast_confirmation)
async def confirm_broadcast(call: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if call.data == "cancel_broadcast":
        lang = user_languages.get(call.from_user.id, "ru")
        await call.message.edit_text(broadcast_texts[lang]["cancelled"])
        await state.clear()
        await call.answer()
        return
    
    if call.data == "confirm_broadcast":
        user_id = call.from_user.id
        if user_id not in broadcast_data:
            await call.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        data = broadcast_data[user_id]
        recipients = data['recipients']
        text = data['text']
        
        lang = user_languages.get(call.from_user.id, "ru")
        total = len(recipients)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        progress_message = await call.message.answer(
            broadcast_texts[lang]["started"].format(total=total)
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        success = 0
        failed = 0
        
        for i, (recipient_id, recipient_type) in enumerate(recipients, 1):
            try:
                await call.bot.send_message(
                    chat_id=recipient_id,
                    text=text,
                    parse_mode="HTML"
                )
                success += 1
            except Exception as e:
                failed += 1
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {recipient_type} {recipient_id}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ
            if i % 10 == 0 or i == total:
                percentage = (i / total) * 100
                try:
                    await progress_message.edit_text(
                        broadcast_texts[lang]["progress"].format(
                            success=success, total=total, percentage=int(percentage)
                        )
                    )
                except:
                    pass
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
            await asyncio.sleep(0.1)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        await progress_message.edit_text(
            broadcast_texts[lang]["completed"].format(
                success=success, failed=failed, total=total
            )
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑—É
        save_broadcast_stats(user_id, text, success, failed, total)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if user_id in broadcast_data:
            del broadcast_data[user_id]
        
        await state.clear()
        await call.answer()

# ==============================
# üîò –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
# ==============================
@router.callback_query(lambda c: c.data == "broadcast_stats")
async def show_broadcast_stats(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if not is_admin(call.from_user.id):
        lang = user_languages.get(call.from_user.id, "uz")
        await call.answer(broadcast_texts[lang]["not_admin"], show_alert=True)
        return
    
    stats = get_broadcast_stats()
    
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫:</b>\n\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {stats['total_broadcasts']}\n"
    text += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {stats['total_success']}\n"
    text += f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {stats['total_failed']}\n"
    text += f"‚Ä¢ –û–±—â–∏–π –æ—Ö–≤–∞—Ç: {stats['total_recipients']}\n\n"
    text += "üìà <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–∞—Å—Å—ã–ª–æ–∫:</b>\n\n"
    
    for broadcast in stats['recent_broadcasts']:
        text += f"‚Ä¢ {broadcast['date']}: {broadcast['success']}/{broadcast['total']} —É—Å–ø–µ—à–Ω—ã—Ö\n"
    
    await call.message.answer(text)
    await call.answer()

# ==============================
# üîò –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
# ==============================
def save_broadcast_stats(admin_id: int, text: str, success: int, failed: int, total: int):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑—É"""
    conn = get_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS broadcasts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        admin_id INTEGER NOT NULL,
        message_text TEXT NOT NULL,
        success_count INTEGER NOT NULL,
        failed_count INTEGER NOT NULL,
        total_count INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    cursor.execute('''
    INSERT INTO broadcasts (admin_id, message_text, success_count, failed_count, total_count)
    VALUES (?, ?, ?, ?, ?)
    ''', (admin_id, text[:1000], success, failed, total))
    
    conn.commit()
    conn.close()

def get_broadcast_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫"""
    conn = get_connection()
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS broadcasts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        admin_id INTEGER NOT NULL,
        message_text TEXT NOT NULL,
        success_count INTEGER NOT NULL,
        failed_count INTEGER NOT NULL,
        total_count INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    stats = {}
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute('SELECT COUNT(*) FROM broadcasts')
    stats['total_broadcasts'] = cursor.fetchone()[0] or 0
    
    cursor.execute('SELECT SUM(success_count), SUM(failed_count), SUM(total_count) FROM broadcasts')
    result = cursor.fetchone()
    stats['total_success'] = result[0] or 0
    stats['total_failed'] = result[1] or 0
    stats['total_recipients'] = result[2] or 0
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–∞—Å—Å—ã–ª–æ–∫
    cursor.execute('''
    SELECT DATE(created_at), success_count, total_count 
    FROM broadcasts 
    ORDER BY created_at DESC 
    LIMIT 5
    ''')
    
    recent = []
    for date, success, total in cursor.fetchall():
        recent.append({
            'date': date,
            'success': success,
            'total': total
        })
    
    stats['recent_broadcasts'] = recent
    
    conn.close()
    return stats

# ==============================
# üîò –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä—è–º–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
# ==============================
@router.message(Command("broadcast"))
async def direct_broadcast_command(message: Message, state: FSMContext):
    """–ü—Ä—è–º–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        lang = user_languages.get(message.from_user.id, "uz")
        await message.answer(broadcast_texts[lang]["not_admin"])
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if not message.text or len(message.text.split()) < 2:
        await message.answer("‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /broadcast [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É)
    broadcast_text = message.text.split(' ', 1)[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    recipients = []
    groups = get_all_groups()
    users = get_all_users()
    
    recipients.extend([(chat_id, 'group') for chat_id in groups])
    recipients.extend([(user_id, 'user') for user_id in users])
    
    if not recipients:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
        return
    
    total = len(recipients)
    success = 0
    failed = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    progress_message = await message.answer(f"üöÄ <b>–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...</b>\n\n–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    for i, (recipient_id, recipient_type) in enumerate(recipients, 1):
        try:
            await message.bot.send_message(
                chat_id=recipient_id,
                text=broadcast_text,
                parse_mode="HTML"
            )
            success += 1
        except Exception as e:
            failed += 1
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {recipient_type} {recipient_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        if i % 10 == 0 or i == total:
            percentage = (i / total) * 100
            try:
                await progress_message.edit_text(
                    f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
                    f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {i}/{total}\n"
                    f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                    f"‚Ä¢ –û—à–∏–±–æ–∫: {failed}\n"
                    f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {int(percentage)}%"
                )
            except:
                pass
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        await asyncio.sleep(0.1)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    await progress_message.edit_text(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {failed}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {total}"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    save_broadcast_stats(message.from_user.id, broadcast_text, success, failed, total)