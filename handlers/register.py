# register.py - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from keyboards.main_menu import main_menu
from keyboards.admin_buttons import admin_approve_buttons
from data.languages import user_languages
from data.db import save_application
from data.admins import ADMINS

# ID –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_GROUP_ID = -4931417098

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_course = State()
    waiting_for_phone = State()

# –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
registration_texts = {
    "ru": {
        "start": "üìù <b>–ó–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å—ã:</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–ò–û:",
        "full_name_example": "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
        "course": "üéì <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:</b>\n\n" + "\n".join([
            "‚Ä¢ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å –¥–æ–º–∞",
            "‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", 
            "‚Ä¢ –ë–∏–æ–ª–æ–≥–∏—è",
            "‚Ä¢ IT –∫—É—Ä—Å—ã",
            "‚Ä¢ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
            "‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "‚Ä¢ –ê—Ä–∞–±—Å–∫–∏–π —è–∑—ã–∫",
            "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫—É—é —à–∫–æ–ª—É",
            "‚Ä¢ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π —É—á–µ—Ç",
            "‚Ä¢ –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω",
            "‚Ä¢ –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "‚Ä¢ –ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
            "‚Ä¢ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
            "‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è",
            "‚Ä¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–¥–∞–∂–∏"
        ]),
        "phone": "üì± <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n\n–ü—Ä–∏–º–µ—Ä: +998901234567",
        "success": "‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{}\n\nüìû –î–ª—è —Å–≤—è–∑–∏: {}"
    },
    "uz": {
        "start": "üìù <b>Kurslarga ro'yxatdan o'tish:</b>\n\nIltimos, ismingizni yuboring:",
        "full_name_example": "Namuna: Alisher Navoiy",
        "course": "üéì <b>Kursni tanlang:</b>\n\n" + "\n".join([
            "‚Ä¢ Uy Hamshiralik",
            "‚Ä¢ Ingliz tili",
            "‚Ä¢ Biologiya",
            "‚Ä¢ IT kurslari",
            "‚Ä¢ Rus tili",
            "‚Ä¢ Matematika",
            "‚Ä¢ Arab tili",
            "‚Ä¢ Prezident maktabiga tayyorlov",
            "‚Ä¢ Buxgalteriya hisobi",
            "‚Ä¢ Grafik dizayn",
            "‚Ä¢ Kiberxavfsizlik",
            "‚Ä¢ Mobil dasturlash",
            "‚Ä¢ Veb-dasturlash",
            "‚Ä¢ Psixologiya",
            "‚Ä¢ Marketing va savdo"
        ]),
        "phone": "üì± <b>Telefon raqamingizni yuboring:</b>\n\nNamuna: +998901234567",
        "success": "‚úÖ <b>Arizangiz yuborildi!</b>\n\nAdministrator tez orada siz bilan bog'lanadi.\nAriza raqami: #{}\n\nüìû Bog'lanish uchun: {}"
    },
    "en": {
        "start": "üìù <b>Register for courses:</b>\n\nPlease send your full name:",
        "full_name_example": "Example: John Smith",
        "course": "üéì <b>Choose a course:</b>\n\n" + "\n".join([
            "‚Ä¢ Home Nursing",
            "‚Ä¢ English Language",
            "‚Ä¢ Biology",
            "‚Ä¢ IT Courses",
            "‚Ä¢ Russian Language",
            "‚Ä¢ Mathematics",
            "‚Ä¢ Arabic Language",
            "‚Ä¢ Presidential School Preparation",
            "‚Ä¢ Accounting",
            "‚Ä¢ Graphic Design",
            "‚Ä¢ Cybersecurity",
            "‚Ä¢ Mobile Development",
            "‚Ä¢ Web Development",
            "‚Ä¢ Psychology",
            "‚Ä¢ Marketing and Sales"
        ]),
        "phone": "üì± <b>Send your phone number:</b>\n\nExample: +998901234567",
        "success": "‚úÖ <b>Your application has been sent!</b>\n\nAn administrator will contact you shortly.\nApplication number: #{}\n\nüìû For contact: {}"
    }
}

# ==============================
# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
# ==============================
@router.callback_query(lambda c: c.data == "register")
async def register_start(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    lang = user_languages.get(user_id, "uz")

    text = registration_texts[lang]["start"]
    await call.message.answer(text)
    await state.set_state(RegistrationStates.waiting_for_full_name)
    await call.answer()

# ==============================
# üîò –ü–æ–ª—É—á–µ–Ω–∏–µ –§–ò–û
# ==============================
@router.message(RegistrationStates.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    
    user_id = message.from_user.id
    lang = user_languages.get(user_id, "uz")
    
    text = registration_texts[lang]["course"]
    await message.answer(text)
    await state.set_state(RegistrationStates.waiting_for_course)

# ==============================
# üîò –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞
# ==============================
@router.message(RegistrationStates.waiting_for_course)
async def process_course(message: Message, state: FSMContext):
    await state.update_data(course=message.text)
    
    user_id = message.from_user.id
    lang = user_languages.get(user_id, "uz")
    
    text = registration_texts[lang]["phone"]
    await message.answer(text)
    await state.set_state(RegistrationStates.waiting_for_phone)

# ==============================
# üîò –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏
# ==============================
@router.message(RegistrationStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = message.from_user.id
    lang = user_languages.get(user_id, "uz")
    
    full_name = user_data['full_name']
    course = user_data['course']
    phone = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É
    application_id = save_application(user_id, full_name, course, phone, lang)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤ –≥—Ä—É–ø–ø—É
    admin_text = f"üÜï <b>‚ú® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ö–£–†–° ‚ú®</b>\n\n" \
                 f"üë§ <b>–§–ò–û:</b> {full_name}\n" \
                 f"üìö <b>–ö—É—Ä—Å:</b> {course}\n" \
                 f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n" \
                 f"üÜî <b>Telegram ID:</b> {user_id}\n" \
                 f"üë§ <b>Username:</b> @{message.from_user.username if message.from_user.username else '–ù–µ—Ç'}\n" \
                 f"üìã <b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> #{application_id}\n" \
                 f"üåç <b>–Ø–∑—ã–∫:</b> {lang.upper()}"

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await message.bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=admin_text,
            reply_markup=admin_approve_buttons(user_id, application_id, message.from_user.username)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤: {e}")
        # –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMINS:
            try:
                await message.bot.send_message(
                    chat_id=admin_id,
                    text=admin_text,
                    reply_markup=admin_approve_buttons(user_id, application_id, message.from_user.username)
                )
            except:
                pass

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    success_text = registration_texts[lang]["success"].format(application_id, message.from_user.full_name)
    await message.answer(success_text, reply_markup=main_menu(lang))
    await state.clear()