# ============================================
# üîπ handlers/start.py ‚Äî /start buyrug'i va til tanlash
# ============================================

from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from keyboards.language_menu import language_menu
from keyboards.main_menu import main_menu
from data.languages import user_languages
from data.admins import is_admin

router = Router()

# ==============================
# üåç /start buyrug'i ‚Äî til tanlash
# ==============================
@router.message(CommandStart())
async def start_command(message: types.Message):
    """
    Birinchi marta /start bosilganda til menyusini ko'rsatadi
    """
    text = "üåç <b>Tilni tanlang / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:</b>"
    await message.answer(text, reply_markup=language_menu())

# ==============================
# üåç /language buyrug'i ‚Äî tilni o'zgartirish
# ==============================
@router.message(Command("language"))
async def language_command(message: types.Message):
    """
    /language buyrug'i orqali tilni o'zgartirish
    """
    text = "üåç <b>Tilni tanlang / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:</b>"
    await message.answer(text, reply_markup=language_menu())

# ==============================
# üîò Til tanlash tugmalarini qayta ishlash
# ==============================
@router.callback_query(lambda c: c.data.startswith("lang_"))
async def language_selected_handler(call: types.CallbackQuery):
    """
    Yangi tilni tanlaganda
    """
    user_id = call.from_user.id
    data = call.data
    lang = data.split("_")[1]  # ru, uz, en
    
    # Tilni saqlash
    user_languages[user_id] = lang
    
    # Tasdiqlash xabari
    confirm_texts = {
        "ru": "‚úÖ <b>–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        "uz": "‚úÖ <b>Til O'zbekchaga o'zgartirildi!</b>\n\nKerakli bo'limni tanlang:",
        "en": "‚úÖ <b>Language changed to English!</b>\n\nChoose a section:"
    }
    
    # Salomlashish matnlari
    greetings = {
        "ru": "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –£—á–µ–±–Ω—ã–π –¶–µ–Ω—Ç—Ä!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        "uz": "üëã <b>O'quv markazimizga xush kelibsiz!</b>\n\nKerakli bo'limni tanlang:",
        "en": "üëã <b>Welcome to our Learning Center!</b>\n\nChoose a section:"
    }
    
    await call.message.answer(confirm_texts[lang])
    await call.message.answer(greetings[lang], reply_markup=main_menu(lang))
    await call.answer()
    
# ==============================
# üîò –ö–æ–º–∞–Ω–¥–∞ /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
# ==============================
@router.message(Command("stats"))
async def stats_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(message.from_user.id):
        lang = user_languages.get(message.from_user.id, "uz")
        await message.answer("‚õî <b>Sizda administrator huquqlari yo'q!</b>" if lang == "uz" else 
                            "‚õî <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>" if lang == "ru" else 
                            "‚õî <b>You don't have administrator rights!</b>")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é
    from data.db import get_statistics, get_user_count
    
    stats = get_statistics()
    users_stats = get_user_count()
    lang = user_languages.get(message.from_user.id, "ru")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É—Ä—Å—ã
    popular_courses = ""
    for course, count in stats['popular_courses']:
        popular_courses += f"‚Ä¢ {course}: {count}\n"
    
    # –°—á–∏—Ç–∞–µ–º –∑–∞—è–≤–∫–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞ 7 –¥–Ω–µ–π
    app_last_7_days = sum(count for _, count in stats['applications_last_7_days'])
    quest_last_7_days = sum(count for _, count in stats['questions_last_7_days'])
    
    # –¢–µ–∫—Å—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_texts = {
        "ru": {
            "title": "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n\n",
            "users": "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
                    "‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                    "‚Ä¢ –ü–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫–∏: {applications_users}\n"
                    "‚Ä¢ –ó–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å—ã: {questions_users}\n\n",
            "applications": "üìù <b>–ó–∞—è–≤–∫–∏:</b>\n"
                           "‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_applications}\n"
                           "‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {pending_applications}\n"
                           "‚Ä¢ –û–¥–æ–±—Ä–µ–Ω—ã: {approved_applications}\n"
                           "‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: {rejected_applications}\n\n",
            "questions": "‚ùì <b>–í–æ–ø—Ä–æ—Å—ã:</b>\n"
                        "‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}\n"
                        "‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: {pending_questions}\n"
                        "‚Ä¢ –û—Ç–≤–µ—Ç–∏–ª–∏: {answered_questions}\n\n",
            "recent": "üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π:</b>\n"
                     "‚Ä¢ –ó–∞—è–≤–æ–∫: {app_last_7_days}\n"
                     "‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤: {quest_last_7_days}\n\n",
            "popular": "üéØ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É—Ä—Å—ã:</b>\n{popular_courses}"
        },
        "uz": {
            "title": "üìä <b>BOT STATISTIKASI</b>\n\n",
            "users": "üë• <b>Foydalanuvchilar:</b>\n"
                    "‚Ä¢ Jami foydalanuvchilar: {total_users}\n"
                    "‚Ä¢ Ariza yuborganlar: {applications_users}\n"
                    "‚Ä¢ Savol berganlar: {questions_users}\n\n",
            "applications": "üìù <b>Arizalar:</b>\n"
                           "‚Ä¢ Jami arizalar: {total_applications}\n"
                           "‚Ä¢ Kutayotgan: {pending_applications}\n"
                           "‚Ä¢ Qabul qilingan: {approved_applications}\n"
                           "‚Ä¢ Rad etilgan: {rejected_applications}\n\n",
            "questions": "‚ùì <b>Savollar:</b>\n"
                        "‚Ä¢ Jami savollar: {total_questions}\n"
                        "‚Ä¢ Javob kutayotgan: {pending_questions}\n"
                        "‚Ä¢ Javob berilgan: {answered_questions}\n\n",
            "recent": "üìà <b>7 kunlik faollik:</b>\n"
                     "‚Ä¢ Arizalar: {app_last_7_days}\n"
                     "‚Ä¢ Savollar: {quest_last_7_days}\n\n",
            "popular": "üéØ <b>Mashhur kurslar:</b>\n{popular_courses}"
        },
        "en": {
            "title": "üìä <b>BOT STATISTICS</b>\n\n",
            "users": "üë• <b>Users:</b>\n"
                    "‚Ä¢ Total users: {total_users}\n"
                    "‚Ä¢ Applied: {applications_users}\n"
                    "‚Ä¢ Asked questions: {questions_users}\n\n",
            "applications": "üìù <b>Applications:</b>\n"
                           "‚Ä¢ Total applications: {total_applications}\n"
                           "‚Ä¢ Pending: {pending_applications}\n"
                           "‚Ä¢ Approved: {approved_applications}\n"
                           "‚Ä¢ Rejected: {rejected_applications}\n\n",
            "questions": "‚ùì <b>Questions:</b>\n"
                        "‚Ä¢ Total questions: {total_questions}\n"
                        "‚Ä¢ Waiting: {pending_questions}\n"
                        "‚Ä¢ Answered: {answered_questions}\n\n",
            "recent": "üìà <b>Activity last 7 days:</b>\n"
                     "‚Ä¢ Applications: {app_last_7_days}\n"
                     "‚Ä¢ Questions: {quest_last_7_days}\n\n",
            "popular": "üéØ <b>Popular courses:</b>\n{popular_courses}"
        }
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    text = (
        stats_texts[lang]["title"] +
        stats_texts[lang]["users"].format(
            total_users=users_stats['total_users'],
            applications_users=users_stats['applications_users'],
            questions_users=users_stats['questions_users']
        ) +
        stats_texts[lang]["applications"].format(
            total_applications=stats['total_applications'],
            pending_applications=stats['pending_applications'],
            approved_applications=stats['approved_applications'],
            rejected_applications=stats['rejected_applications']
        ) +
        stats_texts[lang]["questions"].format(
            total_questions=stats['total_questions'],
            pending_questions=stats['pending_questions'],
            answered_questions=stats['answered_questions']
        ) +
        stats_texts[lang]["recent"].format(
            app_last_7_days=app_last_7_days,
            quest_last_7_days=quest_last_7_days
        ) +
        stats_texts[lang]["popular"].format(popular_courses=popular_courses)
    )
    
    await message.answer(text)

# ==============================
# üîò –ö–æ–º–∞–Ω–¥–∞ /panel (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
# ==============================
@router.message(Command("panel"))
async def panel_command(message: types.Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(message.from_user.id):
        lang = user_languages.get(message.from_user.id, "uz")
        await message.answer("‚õî <b>Sizda administrator huquqlari yo'q!</b>" if lang == "uz" else 
                            "‚õî <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>" if lang == "ru" else 
                            "‚õî <b>You don't have administrator rights!</b>")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é
    from data.db import get_pending_applications_count, get_pending_questions_count
    from keyboards.admin_buttons import admin_panel_buttons
    
    pending_apps = get_pending_applications_count()
    pending_questions = get_pending_questions_count()
    
    text = f"üëë <b>Admin Panel</b>\n\n" \
           f"üìä <b>Statistika:</b>\n" \
           f"‚Ä¢ üìù Kutayotgan arizalar: {pending_apps}\n" \
           f"‚Ä¢ ‚ùì Kutayotgan savollar: {pending_questions}\n\n" \
           f"üõ† <b>Boshqaruv:</b>\n" \
           f"Quyidagi tugmalar orqali boshqaring"
    
    await message.answer(text, reply_markup=admin_panel_buttons())